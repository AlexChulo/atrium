import java.util.regex.Pattern

def createGenerateLogicTask(Project project, String suffix = '') {
    String packagePath = "ch/tutteli/atrium/logic" + (suffix != '' ? "/" + suffix : '')
    String packageSuffix = suffix != '' ? '.' + suffix : ''
    String generatedFolder = project.generatedFolder

    return task('generateLogic', description: 'generates ext. methods for AssertionContainer based on interfaces') {
        def path = "$project.projectDir/src/main/kotlin/$packagePath/"
        def interfaces = getInterfaces(path)
        def generatedPath = "$project.projectDir/$generatedFolder/$packagePath"
        inputs.files(interfaces)
        outputs.dir(generatedPath)

        doFirst {
            //TODO delete all files in folder first (as we might have removed things)

            String ln = ln()
            String header = header()

            def identifier = /[a-zA-Z0-9]+/
            def newLine = /(?:\r\n?|\n)/
            def newLineAndIndent = /$newLine\s*/
            def typeIdentifier = / *fun (<.+?> )?($identifier)\((?:$newLineAndIndent)?container: (AssertionContainer<.+?>)/
            def parameter = /,(?: |$newLineAndIndent)($identifier): ([^:]+?)/
            def returnType = /(?:$newLineAndIndent)?\)(:.+)/

            def patterns = (6..0).collect {
                def steps = (0..<it * 2).findAll { it % 2 == 0 }
                new Tuple3<Pattern, String, String>(
                    Pattern.compile(typeIdentifier + parameter * it + returnType),
                    /fun $1$3.$2\(/ + steps.collect { /$${it + 4}: $${it + 5}/ }.join(", ") + /\)$${it * 2 + 4} =/ + (it > 1 ? "$ln    " : " "),
                    /.$2\(this/ + (it > 0 ? ", " : "") + steps.collect { /$${it + 4}/ }.join(", ") + /\)/
                )
            }

            interfaces.forEach { input ->

                def type = getType(input)
                def uncapitalized = type.uncapitalize()
                def output = new File("$generatedPath/${uncapitalized}.kt")
                def content = input.text
                def interfaceName = "${type}Assertions"
                def implValName = "impl"

                String tmp = content.replaceAll(/($newLine\/\*\*[\S\s]+?\*\/)?${newLine}interface $interfaceName \{/,
                    """\

                    import ch.tutteli.atrium.core.ExperimentalNewExpectTypes
                    import ch.tutteli.atrium.logic${packageSuffix}.impl.Default${type}Assertions

                    @Suppress("DEPRECATION" /* OptIn is only available since 1.3.70 which we cannot use if we want to support 1.2 */)
                    @UseExperimental(ExperimentalNewExpectTypes::class)
                    private inline val <T> AssertionContainer<T>.impl: ${type}Assertions
                        get() = getImpl(${type}Assertions::class) { Default${type}Assertions() }
                    """.stripIndent().replace("\n", ln))
                patterns.forEach { triple ->
                    tmp = tmp.replaceAll(triple.first, triple.second + implValName + triple.third)
                }

                String generatedContent = tmp.substring(0, tmp.lastIndexOf("}"))
                output.withWriter('utf-8') { w ->
                    w << header
                    w << generatedContent
                }
            }
        }
    }
}

ext {
    createGenerateLogicTask = this.&createGenerateLogicTask
    generatedFolder = "src/generated/kotlin"
}
