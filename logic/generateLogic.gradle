import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.util.regex.Pattern
import java.util.stream.Collectors

static List<Path> getInterfaces(String path) {
    Files.walk(Paths.get(path), 1).withCloseable { stream ->
        return stream
            .filter { file -> file.fileName.toString().endsWith("Assertions.kt") }
            .sorted(new Comparator<Path>() {
                @Override
                int compare(Path a, Path b) {
                    return a.getFileName().toString() <=> b.getFileName().toString()

                }
            }).collect(Collectors.toList())
    }
}

def createGenerateLogicTask(
    Project project,
    String implsFileName,
    String suffix = '',
    Map<String, Closure<Tuple3<String, String, String>>> additionalPackages = [:]
) {
    def generateLogic = task('generateLogic', description: 'generates ext. methods for AssertionContainer based on interfaces') {}
    Map<String, Closure<Tuple3<String, String, String>>> all = (['': { Path p ->
        new Tuple3(
            'import ch.tutteli.atrium.creating.AssertionContainer',
            '<T> AssertionContainer<T>',
            'getImpl'
        )
    }] + additionalPackages)
    all.forEach { relativePackagePath, f ->
        def task = createGenerateLogicTaskForPackage(project, implsFileName, relativePackagePath, suffix, f)
        generateLogic.dependsOn(task)
    }
    return generateLogic
}

static String getType(Path input) {
    def fileName = input.getFileName().toString()
    return fileName.substring(0, fileName.length() - "Assertions.kt".length())
}

def createGenerateLogicTaskForPackage(
    Project project,
    String implsFileName,
    String relativePackagePath,
    String suffix,
    Closure<Tuple3<String, String, String>> f
) {

    String generatedFolder = project.generatedFolder

    return task("generateLogic_${relativePackagePath.replaceAll('/', '_')}", description: "generates ext. methods for pacakge $relativePackagePath") {
        def packagePath = 'ch/tutteli/atrium/logic' + relativePackagePath + (suffix != '' ? "/" + suffix : '')
        def fullPackage = packagePath.replaceAll('/', '.')
        def path = "$project.projectDir/src/main/kotlin/$packagePath/"
        def interfaces = getInterfaces(path)
        Map<Path, Tuple3<String, String, String>> interfacesWithTuple =
            interfaces.collectEntries { [it, f(it)] }

        def generatedPath = "$project.projectDir/$generatedFolder/$packagePath"
        inputs.files(interfaces)
        outputs.dir(generatedPath)

        def ln = System.lineSeparator()

        doFirst {

            //TODO delete all files in folder first

            def header = """\
                //---------------------------------------------------
                //  Generated content, modify:
                //  logic/generateLogic.gradle
                //  if necessary - enjoy the day ðŸ™‚
                //---------------------------------------------------

                """.stripIndent().replace("\n", ln)

            new File("$generatedPath/${implsFileName}.kt").withWriter('utf-8') { w ->
                w << header
                w << """\
                    @file:JvmMultifileClass
                    @file:JvmName("ImplsKt")
                    package $fullPackage

                    import ch.tutteli.atrium.core.ExperimentalNewExpectTypes
                    import kotlin.jvm.JvmMultifileClass
                    import kotlin.jvm.JvmName

                    """.stripIndent().replace("\n", ln)

                interfacesWithTuple.collect { _, tuple -> tuple.first }.unique().forEach {
                    w << "$it".replace("\n", ln)
                }
                interfacesWithTuple.forEach { interfacePath, tuple ->
                    def type = getType(interfacePath)
                    w << "${ln}import ${fullPackage}.impl.Default${type}Assertions"
                }

                w << "$ln$ln"

                interfacesWithTuple.forEach { interfacePath, tuple ->
                    def type = getType(interfacePath)
                    def (String importStatements,
                    String      extensionTypeSignature,
                    String      getImpl) = tuple
                    w << """\
                        @PublishedApi
                        @Suppress("DEPRECATION" /* OptIn is only available since 1.3.70 which we cannot use if we want to support 1.2 */)
                        @UseExperimental(ExperimentalNewExpectTypes::class)
                        internal inline val ${extensionTypeSignature}._${type.uncapitalize()}Impl
                            get() = $getImpl(${type}Assertions::class) { Default${type}Assertions() }

                        """.stripIndent().replace("\n", ln)
                }
            }

            def identifier = /[a-zA-Z0-9]+/
            def newLine = /(?:\r\n?|\n)/
            def newLineAndIndent = /$newLine\s*/
            def parameter = /,(?: |$newLineAndIndent)($identifier): ([^:]+?)/
            def returnType = /(?:$newLineAndIndent)?\)(:.+)/

            def typeIdentifier = / *fun (<.+?> )?($identifier)\((?:$newLineAndIndent)?$identifier: ($identifier(?:\.$identifier)*<.+>)/
            def patterns = (6..0).collect {
                def steps = (0..<it * 2).findAll { it % 2 == 0 }
                new Tuple3<Pattern, String, String>(
                    Pattern.compile(typeIdentifier + parameter * it + returnType),
                    /fun $1$3.$2\(/ + steps.collect { /$${it + 4}: $${it + 5}/ }.join(", ") + /\)$${it * 2 + 4} =/ + (it > 1 ? "$ln    " : " "),
                    /.$2\(this/ + (it > 0 ? ", " : "") + steps.collect { /$${it + 4}/ }.join(", ") + /\)/
                )
            }

            interfacesWithTuple.forEach { interfacePath, tuple ->
                def type = getType(interfacePath)

                def uncapitalized = type.uncapitalize()
                def output = new File("$generatedPath/${uncapitalized}.kt")
                def content = interfacePath.text
                def interfaceName = "${type}Assertions"
                def implValName = "_${uncapitalized}Impl"

                String tmp = content.replaceAll(/($newLine\/\*\*[\S\s]+?\*\/)?${newLine}interface $interfaceName \{/, "")
                patterns.forEach { triple ->
                    tmp = tmp.replaceAll(triple.first, triple.second + implValName + triple.third)
                }

                String generatedContent = tmp.substring(0, tmp.lastIndexOf("}"))
                output.withWriter('utf-8') { w ->
                    w << header
                    w << generatedContent
                }
            }
        }
    }
}

ext {
    createGenerateLogicTask = this.&createGenerateLogicTask
    generatedFolder = "src/generated/kotlin"
}
