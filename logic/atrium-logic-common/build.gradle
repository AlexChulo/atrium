import java.util.regex.Pattern

description = 'The domain logic of Atrium as common module.'

dependencies {
    api prefixedProject('domain-builders-common')

    // it is up to the consumer which atrium-translations module is used at runtime
    compileOnly prefixedProject('translations-en_GB-common')
}

String packagePath = "ch/tutteli/atrium/logic"
String generatedFolder = "src/generated/kotlin"

sourceSets {
    main.kotlin.srcDirs += generatedFolder
}

def generateExtensionMethods = task('generateExtensionMethods', description: 'generates ext. methods for AssertionContainer based on interfaces') {
    def path = "$project.projectDir/src/main/kotlin/$packagePath/"
    def interfaces = new FileNameFinder().getFileNames(path, '*Assertions.kt')
    def generatedPath = "$project.projectDir/$generatedFolder/$packagePath"
    inputs.files(interfaces)
    outputs.dir(generatedPath)

    doFirst {
        def identifier = /[a-zA-Z0-9]+/
        def typeIdentifier = / *fun (<.+?> )?($identifier)\((?:\n\s*)?container: (AssertionContainer<.+?>)/
        def parameter = /,(?: |\n\s*)($identifier): ([^:]+?)/
        def returnType = /(?:\n\s*)?\)(:.+)/

        def patterns = (6..0).collect {
            def steps = (0..<it * 2).findAll { it % 2 == 0 }
            new Tuple3<Pattern, String, String>(
                Pattern.compile(typeIdentifier + parameter * it + returnType),
                /fun $1$3.$2\(/ + steps.collect { /$${it + 4}: $${it + 5}/ }.join(", ") + /\)$${it * 2 + 4} =/ + (it > 1 ? "\n    " : " "),
                /.$2\(this/ + (it > 0 ? ", " : "") + steps.collect { /$${it + 4}/ }.join(", ") + /\)/
            )
        }
//        def implVarPattern = ~/@ImplVal\("([^"]+)"\)/

        interfaces.forEach {
            def input = new File(it)
            def type = input.name.substring(0, input.name.length() - "Assertions.kt".length())
            def output = new File("$generatedPath/${type}.kt")
            def content = input.text
            def interfaceName = "${type.capitalize()}Assertions"
//            def matcher = content =~ implVarPattern
//            def implValName = matcher.find() ? matcher.group(1) : "_impl"
            def implValName = "_${type}Impl"

            String tmp = content.replaceAll(
                /(\n@ImplVal\([^\)]+\))?\ninterface $interfaceName \{/, ""
            )
            patterns.forEach { triple ->
                tmp = tmp.replaceAll(triple.first, triple.second + implValName + triple.third)
            }
            def header = """\
                //---------------------------------------------------
                //  Generated content, modify: 
                //  logic/atrium-logic-common/build.gradle 
                //  if necessary - enjoy the day ðŸ™‚ 
                //---------------------------------------------------
                
            """.stripIndent()
            String generatedContent = tmp.substring(0, tmp.lastIndexOf("}"))
            output.withWriter { w ->
                w << header
                w << generatedContent
            }
        }
    }
}
compileKotlinCommon.dependsOn(generateExtensionMethods)

