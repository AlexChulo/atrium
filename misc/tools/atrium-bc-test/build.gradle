// Enable if you need to check the task tree, gr task taskTree --no-repeat
//plugins {
//    id "com.dorongold.task-tree" version "1.3.1"
//}

description = 'Checks that specs from older versions of Atrium can still be run with the components of the current version.'

repositories {
    maven { url "https://dl.bintray.com/jetbrains/spek" }
}

configurations {
    common
}

dependencies {
    //spek2
    common "org.junit.platform:junit-platform-console-standalone:$junit_platform_version"
    common "org.spekframework.spek2:spek-dsl-jvm:$spek2_version"
    common "org.spekframework.spek2:spek-runner-junit5:$spek2_version"
    common "org.spekframework.spek2:spek-runtime-jvm:$spek2_version"
    common "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    common mockito(), excludeKotlin
    common kotlinStdlib()

    implementation configurations.common.dependencies
    api prefixedProject('core-api-jvm')
}

def bbcTests = task("bbcTests", group: 'Verification') {
    description = "runs all binary backward compatibility tests"
    dependsOn build
}

def bcTests = task("bcTests", group: 'Verification') {
    description = "runs all backward compatibility tests which compile against the current code"
    dependsOn build
}

['fluent-en_GB', 'infix-en_GB'].each { apiName ->
    task("bcBbc-$apiName", group: 'Verification') {
        description = "runs all backward compatibility and binary backward compatibility tests for $apiName"
        dependsOn build
    }

    task("bc-$apiName", group: 'Verification') {
        description = "runs all backward compatibility tests for $apiName"
        dependsOn build
    }

    task("bbc-$apiName", group: 'Verification') {
        description = "runs all binary backward compatibility tests for $apiName"
        dependsOn build
    }
}

def createBcAndBbcTasksForApis(String oldVersion, String forgive, Boolean withBc, Boolean withBbc, String... apis) {

    Task bc_version = null
    Task bbc_version = null
    if (withBc) {
        bc_version = task("bc-$oldVersion", group: 'Verification')
    }
    if (withBbc) {
        bbc_version = task("bbc-$oldVersion", group: 'Verification')
    }

    apis.each { apiName ->
        createBcAndBbcTasks(apiName, oldVersion, forgive, withBc, withBbc)
        def bcBbcApi = project."bcBbc-$apiName"
        if (withBc) {
            bc_version.dependsOn "bc-${apiName}-$oldVersion"
            bcBbcApi.dependsOn "bc-${apiName}-$oldVersion"
            project."bc-$apiName".dependsOn "bc-${apiName}-$oldVersion"
        }
        if (withBbc) {
            bbc_version.dependsOn "bbc-${apiName}-$oldVersion"
            bcBbcApi.dependsOn "bbc-${apiName}-$oldVersion"
            project."bbc-$apiName".dependsOn "bbc-${apiName}-$oldVersion"
        }
    }
}

Task createJacocoReportTask(String apiName, String name, Task runTask) {
    project.task("jacoco-$name", type: JacocoReport) {
        sourceSets sourceSets.main
        executionData runTask

        def projects = apiName.contains('en_GB') ?
            jacocoMulti.sourceProjects :
            jacocoMulti.sourceProjects -
                prefixedProject('translations-en_GB-jvm') -
                prefixedProject('translations-de_CH-jvm')

        projects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            csv.enabled = false
            xml.enabled = true
            xml.destination file("${buildDir}/reports/jacoco/$name/report.xml")
            html.enabled = true
            html.destination file("${buildDir}/reports/jacoco/$name/html/")
        }
    }
}

static String getNameUnderline(String apiName, String oldVersion) {
    return "${apiName.replaceAll('-', '_')}_${oldVersion.replaceAll("\\.", '_')}"
}

File getSrcDirectory(String apiName, String oldVersion) {
    return file("${project.projectDir}/src/old/$oldVersion/atrium-api-$apiName")
}

def createBcAndBbcTasks(String apiName, String oldVersion, String forgive, Boolean withBc, Boolean withBbc) {
    def nameUnderline = getNameUnderline(apiName, oldVersion)
    def name = "${apiName}-$oldVersion"
    def srcName = "src_$nameUnderline"
    def confCommon = "conf_$nameUnderline"
    def testJar = "testJar_$nameUnderline"
    def testJarSources = "testJarSources_$nameUnderline"
    def srcDirectory = getSrcDirectory(apiName, oldVersion)

    sourceSets {
        create(srcName) {
            kotlin.srcDirs = [srcDirectory]
            resources.srcDirs = [srcDirectory]
            java.srcDirs = [] // we don't have java sources
        }
    }

    configurations {
        create(confCommon)
        create(testJar)
        create(testJarSources)
    }

    dependencies {
        def groupId = 'ch.tutteli.atrium'
        add(testJar, "$groupId:atrium-api-$apiName:$oldVersion:tests") {
            exclude group: '*'
        }
        add(testJarSources, "$groupId:atrium-api-$apiName:$oldVersion:testsources") {
            exclude group: '*'
        }

        //TODO tests are now mostly in the common module. However, we cannot unzip this to the jvm project but
        // require a common module for it. Probably easiest to introduce a second bc-test which is an MPP project
//            add(testJarSources, "$groupId:atrium-api-$apiName-common:$oldVersion:testsources") {
//                exclude group: '*'
//            }
        add(confCommon, "$groupId:atrium-specs:$oldVersion") {
            exclude group: 'ch.tutteli.atrium'
        }
        //required by atrium-specs
        add(confCommon, "$groupId:atrium-api-fluent-en_GB:$oldVersion") {
            exclude group: 'ch.tutteli.atrium'
        }
        add(confCommon, prefixedProject("verbs-internal-jvm")) {  //required by specs in the APIs
            exclude group: '*'
        }

        //required by atrium-specs
        add(confCommon, prefixedProject("$apiName-jvm"))

        // dependencies for samples
        add(confCommon, "org.jetbrains.kotlin:kotlin-test:$kotlin_version")
        add(confCommon, "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version")
        add(confCommon, "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion")

        add(confCommon, sourceSets.main.runtimeClasspath)

        owner."${srcName}Implementation" configurations[confCommon].dependencies
    }

    def getArgs = { String scanClassPath ->
        return [
            '--scan-class-path', scanClassPath,
            '--disable-banner',
            '--fail-if-no-tests',
            '--include-engine', 'spek2-deprecation',
            // to execute samples
            '--include-engine', 'junit-jupiter',
            '--include-classname', '.*(Samples|Spec)',
            '--config', forgive,
            '--details', 'summary'
        ]
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "$jacoco_tool_version"
    }

    if (withBbc) {
        def bbcTask = task("bbc-$name", type: JavaExec, group: 'Verification') {
            description = "Checks if specs from $apiName $oldVersion can be run against the current version."

            inputs.files configurations[testJar]
            inputs.files configurations[confCommon]

            classpath configurations[confCommon].asPath
            classpath configurations[testJar].asPath

            main = 'org.junit.platform.console.ConsoleLauncher'
            args = getArgs(configurations[testJar].asPath)
        }

        def jacocoBbcReport = createJacocoReportTask(apiName, "bbc-$name", bbcTask)
        jacoco {
            applyTo bbcTask
        }

        bbcTests.dependsOn jacocoBbcReport
        bbcTests.dependsOn bbcTask
    }

    if (withBc) {

        def unzip = task("unzip-$name") {
            inputs.files configurations[testJarSources]

            outputs.dir srcDirectory
            doLast {
                configurations[testJarSources].each {
                    def jar = it
                    copy {
                        from zipTree(jar)
                        into srcDirectory
                    }
                }
            }
        }


        project."compileSrc_${nameUnderline}Kotlin" {
            kotlinOptions.suppressWarnings = true
            dependsOn unzip
        }

        def bcTask = task("bc-$name", type: JavaExec, group: 'Verification') {
            description = "Checks if specs from $apiName $oldVersion can be compiled and run against the current version."

            inputs.files sourceSets[srcName].runtimeClasspath

            classpath sourceSets[srcName].runtimeClasspath

            main = 'org.junit.platform.console.ConsoleLauncher'
            args = getArgs(sourceSets[srcName].output.classesDirs.asPath)
        }

        def jacocoBcReport = createJacocoReportTask(apiName, "bc-$name", bcTask)
        jacoco {
            applyTo bcTask
        }
        bcTests.dependsOn jacocoBcReport
        bcTests.dependsOn bcTask
    }
}

def createFixSrcTask(String apiName, String oldVersion, String file, Closure modifyContent) {
    def nameUnderline070 = getNameUnderline(apiName, oldVersion)
    def taskSuffix = "$apiName-$oldVersion"
    def fixSrc = task("fixSrc-$taskSuffix-$file") {
        doLast {
            def srcFile = project.file("${getSrcDirectory(apiName, oldVersion)}/ch/tutteli/atrium/api/${apiName.replaceAll('-', '/')}/$file")
            String newContent = modifyContent(srcFile.getText('UTF-8'))
            srcFile.write(newContent, 'UTF-8')
        }
    }
    def unzip = project.tasks.getByName("unzip-$taskSuffix")
    fixSrc.mustRunAfter(unzip)
    project."compileSrc_${nameUnderline070}Kotlin".dependsOn fixSrc
}

//@formatter:off
createBcAndBbcTasksForApis('0.14.0',
    'forgive=(ch/tutteli/atrium/api/(fluent|infix)/en_GB/(' +
        '(IterableContainsInOrderOnly.*Spec)|' +
        '(MapAssertionsSpec.*)' +
        ').*)',
    /* withBc = */ true,
    /* withBbc = */ false,
    'fluent-en_GB', 'infix-en_GB'
)
createBcAndBbcTasksForApis('0.15.0',
    'forgive=^$',
    /* withBc = */ true,
    /* withBbc = */ false,
    'fluent-en_GB', 'infix-en_GB'
)
